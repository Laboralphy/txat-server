var fs = require('fs');
var crypto = require('crypto');
var Q = require('q');

function checkUserPassword(sUser, sPass) {
	var sFile = 'pass.storage/' + sUser;
	var qStat = Q.nbind(fs.stat);
	var qReadFile = Q.nbind(fs.readFile);
	return qStat(sFile).then(function(data) {
		return qReadFile(sFile);
	}).then(function(data) {
		var deferred = Q.defer();
		var hash = '';
		var r = data.toString().match(/[0-9A-FA-f ]+/);
		sPassSha256 = crypto.createHash('sha256').update(sPass).digest('hex');
		if (r) {
			hash = r[0];
		} else {
		}
		if (hash === sPassSha256) {
			deferred.resolve();
		} else {
			deferred.reject(new Error('invalid login/password : ', hash, 'vs', sPassSha256));
		}
		return deferred.promise;
	}, function(err) {
		console.log(err);
	});
}

function defineUserPassword(sUser, sPass) {
	var hash = crypto.createHash('sha256').update(sPass).digest('hex');
	fs.writeFile('pass.storage/' + sUser, hash);
}

try {
	fs.statSync('pass.storage');
} catch (e) {
	fs.mkdirSync('pass.storage');
}


module.exports = {
	check: checkUserPassword,
	change: defineUserPassword
}
