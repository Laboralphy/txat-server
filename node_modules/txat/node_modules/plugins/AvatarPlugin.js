var O2 = require('o2');
var Mediator = require('mediator');
var fs = require('fs');

var AvatarPlugin = O2.extendClass(Mediator.Plugin, {

	// directory for avatars
	PATH_IMAGES : "scripts/Txat/addons/avatar/images/avatars/",
	// default directory for defaults avatars
	PATH_DEFAULT : "scripts/Txat/addons/avatar/images/128_default/",

	// default text color
	COLOR_DEFAULT : "#000000",
	// default background-color
	BG_DEFAULT : "#ffffff",
	// default border-color
	BORDER_DEFAULT : "#000000",

	prefs : {
		image : "avatarImage",
		color : "avatarColor",
		bg : 'avatarBg',
		border : 'avatarBorder'
	},

	/**
	 * return name plugin
	 * 
	 * @return string name plugin
	 */
	getName : function() {
		return 'Avatar';
	},

	/**
	 * executed at start register required plugin
	 */
	init : function() {
		this.register('userPref');
		this.register('message');
		var sStorage = ("www/txat/" + this.PATH_IMAGES).replace(/\/$/, '');
		try {
			fs.statSync(sStorage);
		} catch (e) {
			fs.mkdirSync(sStorage);
		}
	},


	/**
	 * command userpref
	 * 
	 * @param object
	 *            oUser
	 * @param string
	 *            sVariable parametre
	 * @param strign
	 *            sValue value to save
	 * @return void
	 */
	userPref : function(oUser, sVariable, sValue) {
		var sName = oUser.getName();
		switch (sVariable) {
		case this.prefs.image:
			if (sValue.substring(0, 4) == "data") {
				// base64 source
				var reg = new RegExp('^data:image\/(.*);base64,(.*)');
				var matches = sValue.match(reg, '');
				var sSrc = matches[2];
				var buf = new Buffer(sSrc, 'base64');
				var data = buf.toString('ascii');
				var sExtension = matches[1];
				var url = this.PATH_IMAGES + sName + "." + sExtension;
				fs.writeFile("www/txat/" + url, data);
				oUser.setData(this.prefs.image, url);
			} else {
				// url direct
				var url = sValue;
				var sFilename = url.split('/').pop();
				var sExtension = sFilename.split('.').pop();
				this._copyImage("www" + url, "www/txat/" + this.PATH_IMAGES
						+ sName + "." + sExtension);
				oUser.setData(this.prefs.image, this.PATH_IMAGES + sName + "."
						+ sExtension);
			}
			break;
		case this.prefs.color:
		case this.prefs.bg:
		case this.prefs.border:
			oUser.setData(sVariable, sValue);
			break;
		}
	},

	/**
	 * Message event add avatar and apply style
	 * 
	 * @param object
	 *            ctx context contain user, .. object
	 */
	message : function(ctx) {
		var oUser = ctx.user;
		// si pas encore d'image
		var url = oUser.getData('avatarImage');
		var sName = oUser.getName();
		if (url == null) {
			url = this.PATH_DEFAULT + 'default.png';
			this._copyImage("www/txat/" + url, "www/txat/" + this.PATH_IMAGES
					+ sName + ".png");
			oUser.setData("avatarImage", url);
		}

		// si pas de couleur text
		var color = oUser.getData('avatarColor');
		if (color == null) {
			color = this.COLOR_DEFAULT;
			oUser.setData("avatarColor", this.COLOR_DEFAULT);
		}

		// si pas de couleur bg
		var bg = oUser.getData('avatarBg');
		if (bg == null) {
			bg = this.BG_DEFAULT;
			oUser.setData("avatarBg", this.BG_DEFAULT);
		}

		// si pas de couleur border
		var border = oUser.getData('avatarColor');
		if (border == null) {
			border = this.BORDER_DEFAULT;
			oUser.setData("avatarBorder", this.BORDER_DEFAULT);
		}

		// on modifie l'item ici
		ctx.avatar = {
			image : url,
			color : color,
			bg : bg,
			border : border
		};
	},

	/**
	 * private copy image from default to avatars
	 * 
	 * @param string
	 *            srcImage path from
	 * @params string destImage path to
	 */
	_copyImage : function(srcImage, destImage) {
		fs.createReadStream(srcImage).pipe(fs.createWriteStream(destImage));
	}
});

module.exports = AvatarPlugin;
