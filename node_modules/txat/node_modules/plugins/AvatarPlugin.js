var O2 = require('o2');
var Mediator = require('mediator');
var fs = require('fs');

var AvatarPlugin = O2.extendClass(Mediator.Plugin, {

   // directory for avatars
   URL_IMAGES : "scripts/Txat/addons/avatar/images/avatars/",
   PATH_IMAGES : "www/txat/scripts/Txat/addons/avatar/images/avatars/",
   // default directory for defaults avatars
   URL_DEFAULT : "scripts/Txat/addons/avatar/images/128_default/",
   PATH_DEFAULT : "www/txat/scripts/Txat/addons/avatar/images/128_default/",
   // default prefs avatar
   prefsDefault : {
      image : 0,
      extension : "png",
      color : "#000000",
      bg : '#ffffff',
      border : '#000000'
   },
   

   /**
    * return name plugin
    * 
    * @return string name plugin
    */
   getName : function() {
      return 'Avatar';
   },

   /**
    * executed at start register required plugin
    */
   init : function() {
      this.register('userPref');
      this.register('message');
      this.register('userConnected');
      var sStorage = (this.PATH_IMAGES).replace(/\/$/, '');
      try {
         fs.statSync(sStorage);
      } catch (e) {
         fs.mkdirSync(sStorage);
      }
   },

   /**
    * command userpref
    * config already saved by userpref plugin
    * just manipule data config
    * 
    * @param object
    *           oUser
    * @param string
    *           sVariable parametre
    * @param strign
    *           sValue value to save
    * @return void
    */
   userPref : function(oUser, sVariable, sValue) {
      var sName = oUser.getName();
      if (sVariable == "avatar") {
         var oConfigNew = JSON.parse(sValue);
         if ("data" in oConfigNew && oConfigNew.data != false) {
            if (oConfigNew.data.substring(0, 4) == "data") {
               // base64 source
               var reg = new RegExp('^data:image\/(.*);base64,(.*)');
               var matches = oConfigNew.data.match(reg, '');
               var sSrc = matches[2];
               var buf = new Buffer(sSrc, 'base64');
               var url = this.PATH_IMAGES + sName + "." + oConfigNew.extension;
               fs.writeFile(this.PATH_IMAGES + sName + "/" + oConfigNew.image + "." + oConfigNew.extension, buf);
               
            } else {
               console.log('path image');
               // url directg
               var url = "www" + oConfigNew.data;
               this._copyImage(url, this.PATH_IMAGES + sName + "/" + oConfigNew.image + "." + oConfigNew.extension);
            }
         }
      }
   },

   /**
    * Message event add avatar and apply style
    * 
    * @param object
    *           ctx context contain user, .. object
    */
   message : function(ctx) {
      var oUser = ctx.user;
      ctx.avatar = this._store(oUser);
      ctx.avatar.user = oUser.getName();
   },

   userConnected : function(oUser) {
      this._init(oUser);
   },

   /**
    * private copy image from default to avatars
    * 
    * @param string
    *           srcImage path from
    * @params string destImage path to
    */
   _copyImage : function(srcImage, destImage) {
      try {
        fs.statSync(srcImage);
		fs.createReadStream(srcImage).pipe(fs.createWriteStream(destImage));
      } catch (e) {
        
      }
   },

	

   /**
    * Initialisation
    */
   _init : function(oUser) {
      var sName = oUser.getName();
      // création répertoire
      var sPrivateStorage = this.PATH_IMAGES + sName;
      var url = this.URL_IMAGES + sName;
      try {
         fs.statSync(sPrivateStorage);
      } catch (e) {
         fs.mkdirSync(sPrivateStorage);
      }
      // getconfig prefs avatar
      var sConfig = oUser.getData('avatar');
      // si pas défini, default value
      if (sConfig == null) {
         var oConfig = this.prefsDefault;
         this._copyImage(this.PATH_DEFAULT + "default.png", sPrivateStorage + "/0.png");
      } else {
         var oConfig = JSON.parse(sConfig);
      }

      // si version précédente
      var sConfigPrev = oUser.getData('avatarImage');
      if (sConfigPrev != null) {
         var sFilename = sConfigPrev.split('/').pop();
         var sExtension = sFilename.split('.').pop();
         this._copyImage(sPrivateStorage + "." + sExtension, sPrivateStorage + "/0." + sExtension);
         oConfig.image = 0;
         fs.unlinkSync("upref.storage/"+ sName + "/avatarImage");
      }
      sConfigPrev = oUser.getData('avatarColor');
      if (sConfigPrev != null) {
         oConfig.color = sConfigPrev;
         fs.unlinkSync("upref.storage/"+ sName + "/avatarColor");
      }
      sConfigPrev = oUser.getData('avatarBorder');
      if (sConfigPrev != null) {
         oConfig.border = sConfigPrev;
         fs.unlinkSync("upref.storage/"+ sName + "/avatarBorder");
      }
      sConfigPrev = oUser.getData('avatarBg');
      if (sConfigPrev != null) {
         oConfig.bg = sConfigPrev;
         fs.unlinkSync("upref.storage/"+ sName + "/avatarBg");
      }
      oConfig.user = oUser.getName();
      oConfig.data = false;
      this._saveConfig(oUser, oConfig);
   },

   /**
    * Enregistre les prefs
    * 
    * @param object
    *           oUser
    * @param string
    *           sParam
    * @param string
    *           sValue
    * @return mixed value if get param, object oConfig if no param, set value if
    *         value specified and return true
    */
   _store : function(oUser, sParam, sValue) {
      var oConfig = JSON.parse(oUser.getData("avatar"));
      if (!sValue) {
         if (!sParam) {
            return oConfig;
         }
         return oConfig[sParam];
      } else {
         oConfig[sParam] = svalue;
         this._saveConfig(oUser,oConfig);
         return true;
      }
   },

   /**
    * sauvegarde de la config
    * @param object oUser
    * @param object oConfig
    */
   _saveConfig : function(oUser, oConfig) {
      console.log(JSON.stringify(oConfig));
      oUser.setData("avatar", JSON.stringify(oConfig));
   }

});

module.exports = AvatarPlugin;
